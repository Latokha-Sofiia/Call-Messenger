import trackerProviders from "../tracker/index";
import reflectorProviders from "../reflector/index";
import presetsProviders from "../presets/index";
import verificationProviders from "../verification/index";
import interceptorsProviders from "../interceptors/index";
import playablesProviders from "../playables/index";
import interactionPlayersProviders from "../interaction-players/index";
import formattersProviders from "../formatters/index";
import typeExplorersProviders from "../explorers/index";
import { mockOptionsProviders } from "../mock-options/mock-options.providers";
import mockCoreProviders from "../core/index";
import autoMockingProviders from "../auto-mocking/index";
import expressionEqualityComparersProviders from "../expression.equality-comparers/index";
/**
 * Provides the default configuration for an angular based injector that would be used internally by {@link Mock} instance.
 */
export class DefaultInjectorConfig {
    constructor(providers = []) {
        this.providers = providers;
    }
    get(options, providers) {
        return [
            ...providers,
            ...mockOptionsProviders(options),
            ...trackerProviders,
            ...reflectorProviders,
            ...presetsProviders,
            ...autoMockingProviders,
            ...verificationProviders,
            ...interceptorsProviders,
            ...playablesProviders,
            ...interactionPlayersProviders,
            ...formattersProviders,
            ...expressionEqualityComparersProviders,
            ...typeExplorersProviders,
            ...mockCoreProviders,
            ...this.providers,
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1pbmplY3Rvci5jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9pbmplY3Rvci9kZWZhdWx0LWluamVjdG9yLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLGdCQUFnQixNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sa0JBQWtCLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxnQkFBZ0IsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLHFCQUFxQixNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8scUJBQXFCLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxrQkFBa0IsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLDJCQUEyQixNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sbUJBQW1CLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxzQkFBc0IsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUU5RSxPQUFPLGlCQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLG9CQUFvQixNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sb0NBQW9DLE1BQU0sd0NBQXdDLENBQUM7QUFFMUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8scUJBQXFCO0lBQzlCLFlBQTZCLFlBQThCLEVBQUU7UUFBaEMsY0FBUyxHQUFULFNBQVMsQ0FBdUI7SUFDN0QsQ0FBQztJQUVELEdBQUcsQ0FBQyxPQUE4QixFQUFFLFNBQTJCO1FBQzNELE9BQU87WUFDSCxHQUFHLFNBQVM7WUFDWixHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztZQUNoQyxHQUFHLGdCQUFnQjtZQUNuQixHQUFHLGtCQUFrQjtZQUNyQixHQUFHLGdCQUFnQjtZQUNuQixHQUFHLG9CQUFvQjtZQUN2QixHQUFHLHFCQUFxQjtZQUN4QixHQUFHLHFCQUFxQjtZQUN4QixHQUFHLGtCQUFrQjtZQUNyQixHQUFHLDJCQUEyQjtZQUM5QixHQUFHLG1CQUFtQjtZQUN0QixHQUFHLG9DQUFvQztZQUN2QyxHQUFHLHNCQUFzQjtZQUN6QixHQUFHLGlCQUFpQjtZQUNwQixHQUFHLElBQUksQ0FBQyxTQUFTO1NBQ3BCLENBQUM7SUFDTixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJSW5qZWN0b3JDb25maWcsIElNb2NrT3B0aW9ucyB9IGZyb20gXCIuLi9tb3FcIjtcbmltcG9ydCB0cmFja2VyUHJvdmlkZXJzIGZyb20gXCIuLi90cmFja2VyL2luZGV4XCI7XG5pbXBvcnQgcmVmbGVjdG9yUHJvdmlkZXJzIGZyb20gXCIuLi9yZWZsZWN0b3IvaW5kZXhcIjtcbmltcG9ydCBwcmVzZXRzUHJvdmlkZXJzIGZyb20gXCIuLi9wcmVzZXRzL2luZGV4XCI7XG5pbXBvcnQgdmVyaWZpY2F0aW9uUHJvdmlkZXJzIGZyb20gXCIuLi92ZXJpZmljYXRpb24vaW5kZXhcIjtcbmltcG9ydCBpbnRlcmNlcHRvcnNQcm92aWRlcnMgZnJvbSBcIi4uL2ludGVyY2VwdG9ycy9pbmRleFwiO1xuaW1wb3J0IHBsYXlhYmxlc1Byb3ZpZGVycyBmcm9tIFwiLi4vcGxheWFibGVzL2luZGV4XCI7XG5pbXBvcnQgaW50ZXJhY3Rpb25QbGF5ZXJzUHJvdmlkZXJzIGZyb20gXCIuLi9pbnRlcmFjdGlvbi1wbGF5ZXJzL2luZGV4XCI7XG5pbXBvcnQgZm9ybWF0dGVyc1Byb3ZpZGVycyBmcm9tIFwiLi4vZm9ybWF0dGVycy9pbmRleFwiO1xuaW1wb3J0IHR5cGVFeHBsb3JlcnNQcm92aWRlcnMgZnJvbSBcIi4uL2V4cGxvcmVycy9pbmRleFwiO1xuaW1wb3J0IHsgbW9ja09wdGlvbnNQcm92aWRlcnMgfSBmcm9tIFwiLi4vbW9jay1vcHRpb25zL21vY2stb3B0aW9ucy5wcm92aWRlcnNcIjtcbmltcG9ydCB7IFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSBcIi4uL3N0YXRpYy5pbmplY3Rvci9pbnRlcmZhY2UvcHJvdmlkZXJcIjtcbmltcG9ydCBtb2NrQ29yZVByb3ZpZGVycyBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IGF1dG9Nb2NraW5nUHJvdmlkZXJzIGZyb20gXCIuLi9hdXRvLW1vY2tpbmcvaW5kZXhcIjtcbmltcG9ydCBleHByZXNzaW9uRXF1YWxpdHlDb21wYXJlcnNQcm92aWRlcnMgZnJvbSBcIi4uL2V4cHJlc3Npb24uZXF1YWxpdHktY29tcGFyZXJzL2luZGV4XCI7XG5cbi8qKlxuICogUHJvdmlkZXMgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBmb3IgYW4gYW5ndWxhciBiYXNlZCBpbmplY3RvciB0aGF0IHdvdWxkIGJlIHVzZWQgaW50ZXJuYWxseSBieSB7QGxpbmsgTW9ja30gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0SW5qZWN0b3JDb25maWcgaW1wbGVtZW50cyBJSW5qZWN0b3JDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW10pIHtcbiAgICB9XG5cbiAgICBnZXQob3B0aW9uczogSU1vY2tPcHRpb25zPHVua25vd24+LCBwcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10pOiBTdGF0aWNQcm92aWRlcltdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnByb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLm1vY2tPcHRpb25zUHJvdmlkZXJzKG9wdGlvbnMpLFxuICAgICAgICAgICAgLi4udHJhY2tlclByb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLnJlZmxlY3RvclByb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLnByZXNldHNQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi5hdXRvTW9ja2luZ1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLnZlcmlmaWNhdGlvblByb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLmludGVyY2VwdG9yc1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLnBsYXlhYmxlc1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLmludGVyYWN0aW9uUGxheWVyc1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLmZvcm1hdHRlcnNQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi5leHByZXNzaW9uRXF1YWxpdHlDb21wYXJlcnNQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi50eXBlRXhwbG9yZXJzUHJvdmlkZXJzLFxuICAgICAgICAgICAgLi4ubW9ja0NvcmVQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi50aGlzLnByb3ZpZGVycyxcbiAgICAgICAgXTtcbiAgICB9XG59XG4iXX0=