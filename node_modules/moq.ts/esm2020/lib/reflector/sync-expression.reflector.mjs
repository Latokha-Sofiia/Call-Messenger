import { It } from "./expression-predicates";
import { EXPRESSIONS } from "./expression-reflector";
import { ReflectingProxyFactory } from "./reflecting-proxy.factory";
/**
 * This class reflects an expression to an expression tree representation.
 * async/await is not supported.
 *
 * For more examples check
 * [unit tests for this class]
 * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/full.expression-reflector.spec.ts)
 */
export class SyncExpressionReflector {
    constructor(injectorFactory) {
        this.injectorFactory = injectorFactory;
    }
    /**
     * Reflects the provided code as an expression tree.
     */
    reflect(expression) {
        if (expression instanceof It) {
            return [expression];
        }
        const injector = this.injectorFactory.create();
        const proxyFactory = injector.get(ReflectingProxyFactory);
        const proxy = proxyFactory.create();
        const predicate = expression(proxy);
        const expressions = injector.get(EXPRESSIONS);
        return predicate instanceof It && expressions.length === 0
            ? [predicate] : expressions;
    }
    async reflectAsync(expression) {
        if (expression instanceof It) {
            return [expression];
        }
        const injector = this.injectorFactory.create();
        const proxyFactory = injector.get(ReflectingProxyFactory);
        const proxy = proxyFactory.create();
        const predicate = await expression(proxy);
        const expressions = injector.get(EXPRESSIONS);
        return predicate instanceof It && expressions.length === 0
            ? [predicate] : expressions;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luYy1leHByZXNzaW9uLnJlZmxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21vcS9zcmMvbGliL3JlZmxlY3Rvci9zeW5jLWV4cHJlc3Npb24ucmVmbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUc3QyxPQUFPLEVBQXVCLFdBQVcsRUFBZSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBQ2hDLFlBQTZCLGVBQStDO1FBQS9DLG9CQUFlLEdBQWYsZUFBZSxDQUFnQztJQUM1RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxPQUFPLENBQUksVUFBMEI7UUFDeEMsSUFBSSxVQUFVLFlBQVksRUFBRSxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN2QjtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFL0MsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzFELE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVwQyxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFcEMsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUU5QyxPQUFPLFNBQVMsWUFBWSxFQUFFLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQ3RELENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDcEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxZQUFZLENBQUksVUFBMEI7UUFDbkQsSUFBSSxVQUFVLFlBQVksRUFBRSxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN2QjtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFL0MsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzFELE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVwQyxNQUFNLFNBQVMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sU0FBUyxZQUFZLEVBQUUsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDdEQsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUNwQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdCB9IGZyb20gXCIuL2V4cHJlc3Npb24tcHJlZGljYXRlc1wiO1xuaW1wb3J0IHsgRXhwcmVzc2lvbnMgfSBmcm9tIFwiLi9leHByZXNzaW9uc1wiO1xuaW1wb3J0IHsgUmVmbGVjdGluZ1Byb3h5SW5qZWN0b3JGYWN0b3J5IH0gZnJvbSBcIi4vcmVmbGVjdGluZy1wcm94eS5pbmplY3Rvci1mYWN0b3J5XCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uUmVmbGVjdG9yLCBFWFBSRVNTSU9OUywgSUV4cHJlc3Npb24gfSBmcm9tIFwiLi9leHByZXNzaW9uLXJlZmxlY3RvclwiO1xuaW1wb3J0IHsgUmVmbGVjdGluZ1Byb3h5RmFjdG9yeSB9IGZyb20gXCIuL3JlZmxlY3RpbmctcHJveHkuZmFjdG9yeVwiO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVmbGVjdHMgYW4gZXhwcmVzc2lvbiB0byBhbiBleHByZXNzaW9uIHRyZWUgcmVwcmVzZW50YXRpb24uXG4gKiBhc3luYy9hd2FpdCBpcyBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEZvciBtb3JlIGV4YW1wbGVzIGNoZWNrXG4gKiBbdW5pdCB0ZXN0cyBmb3IgdGhpcyBjbGFzc11cbiAqIChodHRwczovL2dpdGh1Yi5jb20vZHZhYnV6eWFyb3YvbW9xLnRzL2Jsb2IvbWFzdGVyL3Byb2plY3RzL21vcS9zcmMvbGliL3JlZmxlY3Rvci9mdWxsLmV4cHJlc3Npb24tcmVmbGVjdG9yLnNwZWMudHMpXG4gKi9cbmV4cG9ydCBjbGFzcyBTeW5jRXhwcmVzc2lvblJlZmxlY3RvciBpbXBsZW1lbnRzIEV4cHJlc3Npb25SZWZsZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0b3JGYWN0b3J5OiBSZWZsZWN0aW5nUHJveHlJbmplY3RvckZhY3RvcnkpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWZsZWN0cyB0aGUgcHJvdmlkZWQgY29kZSBhcyBhbiBleHByZXNzaW9uIHRyZWUuXG4gICAgICovXG4gICAgcHVibGljIHJlZmxlY3Q8VD4oZXhwcmVzc2lvbjogSUV4cHJlc3Npb248VD4pOiBFeHByZXNzaW9uczxUPltdIHtcbiAgICAgICAgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBJdCkge1xuICAgICAgICAgICAgcmV0dXJuIFtleHByZXNzaW9uXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluamVjdG9yID0gdGhpcy5pbmplY3RvckZhY3RvcnkuY3JlYXRlKCk7XG5cbiAgICAgICAgY29uc3QgcHJveHlGYWN0b3J5ID0gaW5qZWN0b3IuZ2V0KFJlZmxlY3RpbmdQcm94eUZhY3RvcnkpO1xuICAgICAgICBjb25zdCBwcm94eSA9IHByb3h5RmFjdG9yeS5jcmVhdGUoKTtcblxuICAgICAgICBjb25zdCBwcmVkaWNhdGUgPSBleHByZXNzaW9uKHByb3h5KTtcblxuICAgICAgICBjb25zdCBleHByZXNzaW9ucyA9IGluamVjdG9yLmdldChFWFBSRVNTSU9OUyk7XG5cbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSBpbnN0YW5jZW9mIEl0ICYmIGV4cHJlc3Npb25zLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgPyBbcHJlZGljYXRlXSA6IGV4cHJlc3Npb25zO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyByZWZsZWN0QXN5bmM8VD4oZXhwcmVzc2lvbjogSUV4cHJlc3Npb248VD4pOiBQcm9taXNlPEV4cHJlc3Npb25zPFQ+W10+IHtcbiAgICAgICAgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBJdCkge1xuICAgICAgICAgICAgcmV0dXJuIFtleHByZXNzaW9uXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluamVjdG9yID0gdGhpcy5pbmplY3RvckZhY3RvcnkuY3JlYXRlKCk7XG5cbiAgICAgICAgY29uc3QgcHJveHlGYWN0b3J5ID0gaW5qZWN0b3IuZ2V0KFJlZmxlY3RpbmdQcm94eUZhY3RvcnkpO1xuICAgICAgICBjb25zdCBwcm94eSA9IHByb3h5RmFjdG9yeS5jcmVhdGUoKTtcblxuICAgICAgICBjb25zdCBwcmVkaWNhdGUgPSBhd2FpdCBleHByZXNzaW9uKHByb3h5KTtcblxuICAgICAgICBjb25zdCBleHByZXNzaW9ucyA9IGluamVjdG9yLmdldChFWFBSRVNTSU9OUyk7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUgaW5zdGFuY2VvZiBJdCAmJiBleHByZXNzaW9ucy5sZW5ndGggPT09IDBcbiAgICAgICAgICAgID8gW3ByZWRpY2F0ZV0gOiBleHByZXNzaW9ucztcbiAgICB9XG59XG4iXX0=