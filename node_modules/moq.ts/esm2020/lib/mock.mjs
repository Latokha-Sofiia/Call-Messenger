import { Times } from "./times";
import { injectorFactory } from "./injector/injector.factory";
import { MOCK } from "./injector/mock.injection-token";
import { DefaultInjectorConfig } from "./injector/default-injector.config";
import { MockCore } from "./core/mock-core";
import { MOCK_CONSTRUCTOR } from "./injector/mock-constructor.injection-token";
/**
 * The default implementation of {@link IMock} interface.
 */
export class Mock {
    constructor(options = {}) {
        const preOptions = { ...Mock.options, ...options };
        const providers = [
            { provide: MOCK, useValue: this, deps: [] },
            { provide: MOCK_CONSTRUCTOR, useValue: (opts) => new Mock(opts), deps: [] },
        ];
        const injector = Mock.InjectorFactory(preOptions, ...providers);
        this.core = injector.get(MockCore);
    }
    /**
     * @hidden
     * Returns a method that is internally used for creating of an angular based injector
     */
    static get injectionFactory() {
        return Mock.InjectorFactory;
    }
    /**
     * @hidden
     * Sets a method that is internally used for creating of an angular based injector
     */
    static set injectionFactory(value) {
        Mock.InjectorFactory = value;
    }
    /**
     * The default mock options that would applied to all instantiating Mock objects.
     * By default it sets {@link IMockOptions.target} as a function, {@link IMockOptions.injectorConfig} as
     * instance of {@link DefaultInjectorConfig} and {@link IMockOptions.name} as undefined.
     * If an options are passed as constructor parameter {@link Mock.constructor} they will override the default options.
     */
    static get options() {
        if (Mock.Options === undefined) {
            Mock.Options = {
                target: () => undefined,
                injectorConfig: new DefaultInjectorConfig()
            };
        }
        return Mock.Options;
    }
    /**
     * The default mock options that would applied to all instantiating Mock objects.
     * If an options are passed as constructor parameter they will override the default options.
     */
    static set options(options) {
        Mock.Options = options;
    }
    get options() {
        return this.core.options;
    }
    get tracker() {
        return this.core.tracker;
    }
    get name() {
        return this.core.name;
    }
    setup(expression) {
        return this.core.setup(expression);
    }
    verify(expression, times = Times.Once()) {
        return this.core.verify(expression, times);
    }
    object() {
        return this.core.object();
    }
    prototypeof(prototype) {
        return this.core.prototypeof(prototype);
    }
    /**
     * @experimental
     */
    insequence(sequence, expression) {
        return this.core.insequence(sequence, expression);
    }
    resolve(token) {
        return this.core.resolve(token);
    }
}
Mock.Options = undefined;
Mock.InjectorFactory = injectorFactory;
//# sourceMappingURL=data:application/json;base64,